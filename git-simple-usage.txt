
* 什么是 Git？

Git 是一个分布式版本控制系统。

* 为什么要开发 Git？

Git 被开发出来是为了管理 Linux 内核的源代码，它的首要作者是 Linus Torvalds，此人
也是 Linux Kernel 的创始人。

* 如何深入学习 Git？

看 man page，阅读 Git 用户手册。可能你想看看这几个页面：

$ man git-tutorial
$ man git-tutorial-2

参考阅读：
[1] 《Pro Git》
[2] 《Git Magic》

在文件服务器上有一些关于 Git 的资料，可以通过以下命令获得：

$ scp -r /mnt/software/from-mofaph/git-pdf ~

或者，通过 ftp 获得。

* Git 的一些基本概念

o 仓库（Repository）
o 暂存区（Index）
o 工作目录（Working directory）

仓库：存放源码变更的地方，通常是在工程目录下的“.git”目录
暂存区：Git 用来暂时存放变更的地方
工作目录：通常是在工程的根目录下（顶层目录）

* Git 的工作流程

Git 中所说的工作目录，是指工程的根目录。Git 会将要提交的文件先放到暂存区，你也可
以通过命令告诉 git 你要直接放到仓库中；然后，Git 会将暂存区中的内容放到仓库中。
当然这个过程需要你告诉 git 如何去做。

* Git 的简单用法

使用版本控制系统来对源码进行管理，通常是想对源码进行追踪，恢复到上一个良好的状
态，比较当前版本和以往版本的不同……

以下的说明中，出现的前缀符“$ ”表示在命令行下进行操作。

使用 Git 进行版本控制，通常可能遇到的问题是：

** 新建仓库

$ git init

** 追踪源码文件

$ git add

一个有用的技巧是，每次编辑修改代码的时候，可能只想 Git 追踪它之前追踪的文件，也
就是之前提交过的文件。可能这样做：

$ git add -u

** 加入仓库中

$ git commit

这时会 Git 会调用文本编辑器，以供你输入一些说明信息。Git 默认调用的是 Vim 编辑
器，你也可以配置 Git 以改变默认调用的编辑器。通过对以下这个 Git 变量进行设置：

$ git config --global core.editor emacs
$ git config --global core.editor nano

** 回退源码版本

可能你现在这个版本中遇到了麻烦，你想回退到上一个版本中：

$ git reset --hard HEAD~1

这样，会回退到上一个版本，如果你想回退 n 个版本：

$ git reset --hard HEAD~n

不过，这是一个危险的命令，因为它会摧毁你当前所做的所有修改。

** 比较修改的差异

$ git diff
$ git diff HEAD
$ git diff --cached

上面提到了“仓库”，“暂存区”和“工作目录”的概念。那么，“git diff”是比较工作
目录和暂存区的差异；“git diff HEAD”是比较工作目录和仓库的差异；“git diff
--cached”是比较暂存区和仓库的差异。

可能这是一个令人混淆的命令，现在说说这几个命令的用途。

想象这样一个场景：你修改了代码，但是由于修改了多处，你甚至不记得你具体修改了哪个
文件，这时你可能想看看你刚才都在忙了一些什么东西。没问题，你可以这样：

$ git diff

之后，你告诉 Git，将这些内容放到暂存区：

$ git add .

你又回去继续编码，完成了一些功能。你想知道现在的修改和之前仓库里的版本有什么不同：

$ git diff HEAD

有可能，你想知道现在所做的修改和暂存区里的不同：

$ git diff --cached

** 提交说明的建议写法

以总结性的一行开头，这一行不得超过 25 个字；随后空一行，然后填写需要说明的信息。
例如：

增加消息接收函数

这里填写为什么增加这个函数，为什么这个修改是必要的。说明这个函数的细节。

** 查看提交日志

$ git log
$ git log -p

** Git 的必杀技，分支特性

通常在进行编码的时候，你可能会有一些新的想法。但是，你又不想弄乱现在的代码；在以
前，你可能会复制一份完整的代码在其他地方，然后再安心地工作。Git 这样的版本控制系
统给了一个不错的解决方法：

$ git branch crazy-idea (1)
$ git checkout crazy-idea (2)

(1) 创建一个新的分支
(2) 切换到这个分支继续工作，这个分支完全不会影响你以前的工作！

噢哦，你竟然完成了那个不可能实现的工作，测试通过后，那么赶快合并到主分支吧：

$ git checkout master
$ git merge crazy-idea

可能这里你会遇到麻烦，就是……就是……就是……你会遇到冲突……通常的解决方法是，
采用某一个分支的，或者重写。

之前的分支没用了，可能你想删掉：

$ git branch -d crazy-idea

* 为什么你有时写“Git”，而有时又写“git”？

Git 在大写的时候，我通常是想说版本控制系统；而在 git 下写时，我通常是指某个命令。

* 为什么 Git 这么难学难用，还要用它呢？

因为它功能十分强大。
