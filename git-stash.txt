
假设我们的工作目录的状态变成了下面这个样子：在暂存区中提交了文件，然后又在这个基
础上做了修改。

现在，假设远程仓库在你最后一次拉取了之后又做了修改。你的朋友告诉你，如果你拉取了
以后会有惊喜。

你拉取了以后，希望新建一个分支浏览一下：

$ git fetch
$ git checkout -b test origin/master
error: Entry 'filename' would be overwritten by merge. Cannot merge.

并没有发生你所希望发生的事情，原因在于你的工作目录不是“干净”的。

可以使用“git stash”储藏所做的修改，保持工作目录的“干净”。但是，这样带来了一
个问题：你不能使用“git diff”来查看工作目录和暂存区的差异。

有什么办法能够浏览一下那些“激动人心”的特性，而又不会搞乱你的工作目录呢？换句话
说，你查看完了其他分支的内容以后，回到之前的分支，你不会丢失任何信息。

$ git stash save --patch "working directory"
$ git checkout -b test origin/master
$ test...edit...compile...
$ git checkout master
$ git stash apply --index stash{0}

* 从 git stash drop 中恢复丢弃的工作成果

作为一个演示，我们建立一个仓库来说明具体的操作过程：

$ mkdir /tmp/t
$ cd /tmp/t
$ git init
$ echo "hello world" >> hello
$ git add .
$ git commit -m "1st commit"
$ echo "changes in index" >> hello
$ git add -u
$ echo "changes in working directory" >> hello
$ git stash save "test recover from git stash drop"

$ git stash drop
Dropped refs/stash@{0} (3a9eb4cb2882101e1ff92734b4057a4996ab2c6b)

$ git fsck --unreachable | grep commit
unreachable commit 5895816d11af466542ace82e6975d4ddfba5fd31
unreachable commit 3a9eb4cb2882101e1ff92734b4057a4996ab2c6b

$ git checkout -b t 3a9eb4cb2882101e1ff92734b4057a4996ab2c6b
$ git log
commit 3a9eb4cb2882101e1ff92734b4057a4996ab2c6b
Merge: e39ad48 5895816
Author: mofaph <mofaph@gmail.com>
Date:   Thu Apr 26 14:24:28 2012 +0800

    On master: test recover from git stash drop

commit 5895816d11af466542ace82e6975d4ddfba5fd31
Author: mofaph <mofaph@gmail.com>
Date:   Thu Apr 26 14:24:28 2012 +0800

    index on master: e39ad48 1st commit

commit e39ad48961c4fdc1137bda057a0013bc07e927e5
Author: mofaph <mofaph@gmail.com>
Date:   Thu Apr 26 14:23:35 2012 +0800

    1st commit

$ git reset 5895816d11af466542ace82e6975d4ddfba5fd31
$ git log
commit 5895816d11af466542ace82e6975d4ddfba5fd31
Author: mofaph <mofaph@gmail.com>
Date:   Thu Apr 26 14:24:28 2012 +0800

    index on master: e39ad48 1st commit

commit e39ad48961c4fdc1137bda057a0013bc07e927e5
Author: mofaph <mofaph@gmail.com>
Date:   Thu Apr 26 14:23:35 2012 +0800

    1st commit

$ git reset --soft e39ad48961c4fdc1137bda057a0013bc07e927e5

至此，我们就已经恢复了曾经丢弃的工作成果了。
